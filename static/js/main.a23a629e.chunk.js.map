{"version":3,"sources":["components/Rectangle.js","components/sortingAlgorithms/SelectionSort.js","components/sortingAlgorithms/InsertionSort.js","components/sortingAlgorithms/mergeSort/MergeTree.js","components/sortingAlgorithms/mergeSort/MergeSort.js","components/sortingAlgorithms/QuickSort.js","components/RectangleCanvas.js","components/OptionBar.js","App.js","serviceWorker.js","index.js"],"names":["Rectangle","height","width","id","setOutlineColor","color","_outlineColor","getOutlineColor","getBgColor","_backgroundColor","setBgColor","getHeight","_height","getJSX","Rect","_width","outlineWidth","_outlineWidth","outlineColor","backgroundColor","rgbString","getID","_id","this","getDefaultBgColor","arr","subArr","tempArr","slice","length","findRectIndex","areMatchingArrays","i","idx","elem","matching","style","outlineStyle","red","green","blue","rgbArr","arr1","arr2","rect1","rect2","compare","SelectionSort","props","sort","sortedIDX","checkingIDX","selectedIDX","setState","isSorting","continueSort","rectArr","state","clock","endSort","incrementSortedIndex","beginSearch","search","console","log","toggleExecutingSort","funct","colors","sorted","selected","unsorted","prevState","check","sortingSpeed","isExecutingSort","setTimeout","sortingProgress","rectangleArr","sortedIndex","checkingIndex","selectedIndex","Box","display","flexDirection","justifyContent","alignItems","minHeight","map","rect","key","margin","listStyleType","Component","InsertionSort","insertIDX","bypassClock","beginInsert","continueInsert","endInsert","doneInsert","PureComponent","Node","data","subArrayIndex","parentNode","array","left","right","isMerged","arrayColor","MergeTree","rootArray","grow","groweR","newestStem","node","root","localIndex","Math","trunc","endingIndex","findMerge","mergingNode","findMergeR","merge","sortedNewIdx","leftArray","rightArray","mergeArray","continueComparing","push","shift","sortedOldIdx","isMergeDone","autoMerge","MergeSort","progress","mergeTree","indices","tempRect","selectedLeft","selectedRight","newColor","semiSorted","QuickSort","oldArray","pivot","low","high","j","findPivot","border","movePivot","scan","middle","pivotIdx","findMedian","idxArray","idxClone","idxSorted","unshift","concat","splice","RectangleCanvas","updateSortingComponent","updateComponent","sortingMethod","isUpdated","sortingOptions","arrKey","currentMethod","methodComponent","resetRectArray","keyReset","toggleResetArr","rectArrTemp","arrLen","generateRect","random","maxRect","minRect","newId","floor","finishedSorting","resetArr","updated","OptionBar","speedSliderHandler","event","newValue","setSpeed","lenSliderHandler","setArrLen","setSortingMethod","arrConstraints","sortingSpeedConstraints","minLen","maxLen","defaultLen","slowest","fastest","defaultSpeed","AppBar","position","Button","onClick","Typography","Divider","orientation","flexItem","ButtonGroup","variant","disabled","opt","Slider","onChange","marks","min","max","step","defaultValue","App","update","method","newLen","newSpeed","speedBase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qTAEMA,E,WACJ,WAAYC,EAAQC,EAAOC,GAAK,IAAD,gCAS/BC,gBAAkB,SAACC,GAAD,OAAY,EAAKC,cAAgBD,GATpB,KAW/BE,gBAAkB,kBAAM,EAAKD,eAXE,KAa/BE,WAAa,kBAAM,EAAKC,kBAbO,KAe/BC,WAAa,SAACL,GAAD,OAAY,EAAKI,iBAAmBJ,GAflB,KAiB/BM,UAAY,kBAAM,EAAKC,SAjBQ,KAmB/BC,OAAS,kBACP,kBAACC,EAAD,CACEb,OAAQ,EAAKW,QACbV,MAAO,EAAKa,OACZC,aAAc,EAAKC,cACnBC,aAAc,EAAKZ,cACnBa,gBAAiBnB,EAAUoB,UAAU,EAAKX,qBAzBf,KA6B/BY,MAAQ,kBAAM,EAAKC,KA5BjBC,KAAKD,IAAMnB,EACXoB,KAAKX,QAAUX,EACfsB,KAAKR,OAASb,EACdqB,KAAKjB,cAAgB,SACrBiB,KAAKN,cAAgB,EACrBM,KAAKd,iBAAmBT,EAAUwB,oB,4DA0ClBC,EAAKC,GACrB,IAAIC,EAAUF,EAAIG,QAClB,GAAsB,IAAlBF,EAAOG,OACT,OAAwD,IAAjD7B,EAAU8B,cAAcH,EAASD,EAAO,IAC5C,GAAIA,EAAOG,OAASJ,EAAII,OAAQ,OAAO,EACvC,GAAIH,EAAOG,SAAWJ,EAAII,OAC7B,OAAO7B,EAAU+B,kBAAkBN,EAAKC,GAE1C,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAOG,OAAQG,IAAK,CACtC,IAAIC,EAAMjC,EAAU8B,cAAcH,EAASD,EAAOM,IAClD,IAAa,IAATC,EAAY,OAAO,EACR,IAAND,GAAWC,EAAM,EAAGD,GAAK,EAC7BL,EAAUA,EAAQC,MAAMK,EAAM,GAErC,OAAO,I,oCAGYR,EAAKS,GACxB,IAAK,IAAIF,EAAI,EAAGA,EAAIP,EAAII,OAAQG,IAC9B,GAAIhC,EAAUmC,SAASV,EAAIO,GAAIE,GAAO,OAAOF,EAC/C,OAAQ,M,KAUZ,SAASlB,EAAT,GAA+E,IAA/Db,EAA8D,EAA9DA,OAAQC,EAAsD,EAAtDA,MAAOc,EAA+C,EAA/CA,aAAcE,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,gBACnDiB,EAAQ,CACZjB,gBAAgB,GAAD,OAAKA,GACpBD,aAAa,GAAD,OAAKA,GACjBmB,aAAc,QACdpC,OAAO,GAAD,OAAKA,EAAL,MACNC,MAAM,GAAD,OAAKA,EAAL,MACLc,aAAa,GAAD,OAAKA,EAAL,OAId,OAAO,yBAAKoB,MAAOA,IA1FfpC,EAgCGwB,kBAAoB,WACzB,MAAO,CAAEc,IAAK,GAAIC,MAAO,IAAKC,KAAM,MAjClCxC,EAoCGoB,UAAY,SAACqB,GAAY,IACtBH,EAAqBG,EAArBH,IAAKC,EAAgBE,EAAhBF,MAAOC,EAASC,EAATD,KACpB,MAAM,OAAN,OAAcF,EAAd,YAAqBC,EAArB,YAA8BC,EAA9B,MAtCExC,EAyCG+B,kBAAoB,SAACW,EAAMC,GAChC,GAAID,EAAKb,QAAUc,EAAKd,OAAQ,OAAO,EACvC,IAAK,IAAIG,EAAI,EAAGA,EAAIU,EAAKb,OAAQG,IAC/B,IA5CAhC,EA4CUmC,SAASO,EAAKV,GAAIW,EAAKX,IAAK,OAAO,EAC/C,OAAO,GA7CLhC,EAwEGmC,SAAW,SAACS,EAAOC,GACxB,GAAID,EAAMvB,SAAWwB,EAAMxB,QAAS,OAAO,GAzEzCrB,EA4EG8C,QAAU,SAACF,EAAOC,GAAR,OAAkBD,EAAMjC,YAAckC,EAAMlC,aAiBhDX,Q,gBC6EA+C,EAxKf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoDRC,KAAO,SAACC,EAAWC,EAAaC,GAC9B,EAAKC,SAAS,CAAEC,WAAW,IAC3B,EAAKC,aAAaL,EAAWC,EAAaC,IAvDzB,EA0DnBG,aAAe,SAACL,EAAWC,EAAaC,GAAiB,IAC/CI,EAAY,EAAKC,MAAjBD,QACR,EAAKE,MAAMR,EAAWC,EAAaC,GAAa,WAC1CF,IAAcM,EAAQ3B,OACxB,EAAK8B,UACIR,IAAgBK,EAAQ3B,OACjC,EAAK+B,qBACHV,EACAC,EACAC,EACA,EAAKG,cAEEJ,IAAgBD,EACzB,EAAKW,YACHX,EACAC,EACAC,EACA,EAAKG,cAEEJ,EAAcD,EACvB,EAAKY,OAAOZ,EAAWC,EAAaC,EAAa,EAAKG,cAEtDQ,QAAQC,IAAI,YAhFC,EAqFnBL,QAAU,WACR,EAAKX,MAAMiB,sBACX,EAAKZ,SAAS,CAAEC,WAAW,KAvFV,EA0FnBM,qBAAuB,SAACV,EAAWC,EAAaC,EAAac,GAAW,IAAD,EACzC,EAAKT,MAAzBD,EAD6D,EAC7DA,QAASW,EADoD,EACpDA,OACXxC,EAAU6B,EAAQ5B,QACxB,GAAIwB,EAAcF,EAAW,CAAC,IAAD,EACkB,CAC3CvB,EAAQyB,GACRzB,EAAQuB,IAFTvB,EAAQuB,GADkB,KACNvB,EAAQyB,GADF,KAM7BzB,EAAQuB,GAAW9C,gBAAgB+D,EAAOC,QAC1C,EAAKf,SAAS,CAAEG,QAAS7B,IAAW,kBAClCuC,EAAMhB,EAAY,EAAGA,EAAY,EAAGA,EAAY,OArGjC,EAyGnBW,YAAc,SAACX,EAAWC,EAAaC,EAAac,GAAW,IAAD,EAChC,EAAKT,MAAzBD,EADoD,EACpDA,QAASW,EAD2C,EAC3CA,OACXxC,EAAU6B,EAAQ5B,QACxBD,EAAQwB,GAAa/C,gBAAgB+D,EAAOE,UAC5C,IAAK,IAAIrC,EAAIkB,EAAY,EAAGlB,EAAIL,EAAQE,OAAQG,IAC9CL,EAAQK,GAAG5B,gBAAgB+D,EAAOG,UACpC,EAAKjB,UACH,SAACkB,GAAD,MAAgB,CACdf,QAAS7B,MAEX,WACEuC,EAAMhB,EAAWC,EAAc,EAAGC,OApHrB,EAyHnBU,OAAS,SAACZ,EAAWC,EAAaC,EAAac,GAAW,IAAD,EAC3B,EAAKT,MAAzBD,EAD+C,EAC/CA,QAASW,EADsC,EACtCA,OACXxC,EAAU6B,EAAQ5B,QAEpB5B,EAAU8C,QAAQnB,EAAQyB,GAAczB,EAAQwB,KAC9CC,IAAgBF,GAClBvB,EAAQyB,GAAahD,gBAAgB+D,EAAOK,OAE9CT,QAAQC,IAAI,UACZrC,EAAQwB,GAAa/C,gBAAgB+D,EAAOE,UAC5C,EAAKhB,UACH,SAACkB,GAAD,MAAgB,CACdf,QAAS7B,MAEX,kBAAMuC,EAAMhB,EAAWC,EAAc,EAAGA,QAG1CxB,EAAQwB,GAAa/C,gBAAgB+D,EAAOK,OAC5C,EAAKnB,UACH,SAACkB,GAAD,MAAgB,CACdf,QAAS7B,MAEX,kBAAMuC,EAAMhB,EAAWC,EAAc,EAAGC,QA/I3B,EAoJnBM,MAAQ,SAACR,EAAWC,EAAaC,EAAac,GAAW,IAAD,EACZ,EAAKlB,MAAvCyB,EAD8C,EAC9CA,aAAcC,EADgC,EAChCA,gBAClBA,EACFC,YAAW,WACLD,EAAiBR,IAEnB,EAAKb,SAAS,CACZuB,gBAAiB,CAAC1B,EAAWC,EAAaC,GAC1CE,WAAW,MAEdmB,GAEH,EAAKpB,SAAS,CACZuB,gBAAiB,CAAC1B,EAAWC,EAAaC,GAC1CE,WAAW,KAhKf,EAAKG,MAAQ,CACXD,QAAS,GACToB,gBAAiB,CAAC,EAAG,EAAG,GACxBtB,WAAW,EACXa,OAAQ,CACNG,SAAU,SACVF,OAAQ,iBACRC,SAAU,YACVG,MAAO,cAVM,EADrB,gEAiBIjD,KAAK8B,SAAS,CAAEG,QAASjC,KAAKyB,MAAM6B,iBAjBxC,2CAoBwB,IAAD,EAC6BtD,KAAKkC,MAApCH,GADE,EACXE,QADW,EACFF,WAAWsB,EADT,EACSA,gBACpBF,EAAoBnD,KAAKyB,MAAzB0B,gBACR,IAAKpB,GAAaoB,EAAiB,CAAC,IAAD,cACiBE,EADjB,GAC5BE,EAD4B,KACfC,EADe,KACAC,EADA,KAEjCzD,KAAK0B,KAAK6B,EAAaC,EAAeC,MAzB5C,+BA8BwBzD,KAAKkC,MAAjBD,QAER,OACE,kBAACyB,EAAA,EAAD,CACEC,QAAQ,OACRC,cAAc,MACdC,eAAe,SACfC,WAAW,SACXC,UAAU,SAET/D,KAAKkC,MAAMD,QAAQ+B,KAAI,SAACC,GACvB,OACE,wBACEC,IAAKD,EAAKnE,QACVe,MAAO,CAAEsD,OAAQ,OAAQC,cAAe,SAEvCH,EAAK3E,kBA9CpB,GAAmC+E,aC+IpBC,EA/If,kDACE,WAAY7C,GAAQ,IAAD,8BACjB,cAAMA,IAmDRC,KAAO,WAAO,IAAD,EACkC,EAAKQ,MAA1CmB,EADG,EACHA,gBAAiBT,EADd,EACcA,OAAQX,EADtB,EACsBA,QADtB,cAEoBoB,EAFpB,GAEJ1B,EAFI,KAEO4C,EAFP,KAGLnE,EAAU6B,EAAQ5B,QACxBD,EAAQ,GAAGvB,gBAAgB+D,EAAOC,QAClC,EAAKf,SAAS,CAAEG,QAAS7B,EAAS2B,WAAW,IAAQ,kBACnD,EAAKC,aAAaL,EAAW4C,OA1Dd,EA8DnBvC,aAAe,SAACL,EAAW4C,EAAWC,GACpC,EAAKrC,MACHR,EACA4C,GACA,WAAO,IACGtC,EAAY,EAAKC,MAAjBD,QACJN,EAAYM,EAAQ3B,OACtB,EAAK8B,UACImC,IAAc5C,EACvB,EAAK8C,YAAY9C,EAAW4C,EAAW,EAAKvC,cACnCuC,EAAY,EACrB,EAAKG,eAAe/C,EAAW4C,EAAW,EAAKvC,cACtCuC,GAAa,GACtB,EAAKI,UAAUhD,EAAW4C,EAAW,EAAKvC,gBAG9CwC,IA9Ee,EAkFnBpC,QAAU,WACR,EAAKX,MAAMiB,sBACX,EAAKZ,SAAS,CAAEC,WAAW,KApFV,EAuFnB0C,YAAc,SAAC9C,EAAW4C,EAAW5B,GAAW,IAAD,EACjB,EAAKT,MAAzBD,EADqC,EACrCA,QAASW,EAD4B,EAC5BA,OACXxC,EAAU6B,EAAQ5B,QACxBD,EAAQmE,EAAY,GAAG1F,gBAAgB+D,EAAOE,UAC9C,EAAKhB,SAAS,CAAEG,QAAS7B,IAAW,kBAAMuC,EAAMhB,EAAWA,EAAY,OA3FtD,EA8FnB+C,eAAiB,SAAC/C,EAAW4C,EAAW5B,GAAW,IAAD,EACR,EAAKT,MAArCD,EADwC,EACxCA,QAAS2C,EAD+B,EAC/BA,WAAYhC,EADmB,EACnBA,OACvBxC,EAAU6B,EAAQ5B,QACxB,GAAI5B,EAAU8C,QAAQnB,EAAQmE,EAAY,GAAInE,EAAQmE,IAAa,CAAC,IAAD,EAClB,CAC7CnE,EAAQmE,EAAY,GACpBnE,EAAQmE,IAFTnE,EAAQmE,GADwD,KAC5CnE,EAAQmE,EAAY,GADwB,KAKjE,EAAKzC,SAAS,CAAEG,QAAS7B,IAAW,kBAClCuC,EAAMhB,EAAW4C,EAAY,WAG/BnE,EAAQmE,GAAW1F,gBAAgB+D,EAAOC,QAC1C,EAAKf,SAAS,CAAEG,QAAS7B,IAAW,kBAAMuC,EAAMhB,EAAWiD,OA3G5C,EA+GnBD,UAAY,SAAChD,EAAW4C,EAAW5B,GAAW,IAAD,EACf,EAAKT,MAAzBD,EADmC,EACnCA,QAASW,EAD0B,EAC1BA,OACXxC,EAAU6B,EAAQ5B,QACN,IAAdkE,GACFnE,EAAQmE,GAAW1F,gBAAgB+D,EAAOC,QAC1C,EAAKf,SAAS,CAAEG,QAAS7B,IAAW,kBAClCuC,EAAMhB,EAAY,EAAGA,EAAY,OAE9BgB,EAAMhB,EAAY,EAAGA,EAAY,GAAG,IAvH1B,EA0HnBQ,MAAQ,SAACR,EAAW4C,EAAW5B,EAAO6B,GAAiB,IAAD,EACV,EAAK/C,MAAvCyB,EAD4C,EAC5CA,aAAcC,EAD8B,EAC9BA,gBAClBA,IAAoBqB,EACtBpB,YAAW,WACLD,EAAiBR,IAEnB,EAAKb,SAAS,CACZuB,gBAAiB,CAAC1B,EAAW4C,GAC7BxC,WAAW,MAEdmB,GACIsB,EAAa7B,IAEpB,EAAKb,SAAS,CACZuB,gBAAiB,CAAC1B,EAAW4C,GAC7BxC,WAAW,KAvIf,EAAKG,MAAQ,CACXD,QAAS,GACTF,WAAW,EACXsB,gBAAiB,CAAC,EAAG,GACrBuB,YAAa,EACbhC,OAAQ,CACNG,SAAU,SACVF,OAAQ,iBACRC,SAAU,cAVG,EADrB,gEAiBI9C,KAAK8B,SAAS,CAAEG,QAASjC,KAAKyB,MAAM6B,iBAjBxC,2CAoBwB,IACZvB,EAAc/B,KAAKkC,MAAnBH,UACAoB,EAAoBnD,KAAKyB,MAAzB0B,iBACHpB,GAAaoB,GAChBnD,KAAK0B,SAxBX,+BA6BwB1B,KAAKkC,MAAjBD,QAER,OACE,kBAACyB,EAAA,EAAD,CACEC,QAAQ,OACRC,cAAc,MACdC,eAAe,SACfC,WAAW,SACXC,UAAU,SAET/D,KAAKkC,MAAMD,QAAQ+B,KAAI,SAACC,GACvB,OACE,wBACEC,IAAKD,EAAKnE,QACVe,MAAO,CAAEsD,OAAQ,OAAQC,cAAe,SAEvCH,EAAK3E,kBA7CpB,GAAmCuF,iBCJ7BC,EACJ,WAAYC,EAAMC,EAAeC,GAAa,oBAC5CjF,KAAKkF,MAAQH,EACb/E,KAAKmF,KAAO,KACZnF,KAAKoF,MAAQ,KACbpF,KAAKiF,WAAaA,EAClBjF,KAAKgF,cAAgBA,EACrBhF,KAAKqF,UAAW,EACZrF,KAAKkF,OAASlF,KAAKkF,MAAM5E,OAAS,IACpCN,KAAKsF,WAAatF,KAAKkF,MAAM,GAAGjG,eA4GvBsG,EArGb,WAAYC,GAAY,IAAD,gCAMvBC,KAAO,WACL,OAAO,EAAKC,OAAO,EAAKC,aAPH,KAUvBD,OAAS,SAACE,GACR,GAAIA,EAAKV,MAAM5E,QAAU,GAAMsF,EAAKR,OAASQ,EAAKT,KAChD,OAAIS,IAAS,EAAKC,KACT,KAEA,EAAKH,OAAOE,EAAKX,YAErB,GAAKW,EAAKT,MAOV,GAAIS,EAAKT,KAAM,CACpB,IAAIW,EAAaC,KAAKC,MAAMJ,EAAKV,MAAM5E,OAAS,GAChDsF,EAAKR,MAAQ,IAAIN,EACfc,EAAKV,MAAM7E,MAAMyF,GACjBF,EAAKZ,cAAgBc,EACrBF,GAEF,EAAKD,WAAaC,EAAKR,YAbvBQ,EAAKT,KAAO,IAAIL,EACdc,EAAKV,MAAM7E,MAAM,EAAG0F,KAAKC,MAAMJ,EAAKV,MAAM5E,OAAS,IACnDsF,EAAKZ,cACLY,GAEF,EAAKD,WAAaC,EAAKT,KAYzB,OAFA,EAAKQ,WAAWN,SAA4C,IAAjC,EAAKM,WAAWT,MAAM5E,OACjD,EAAKqF,WAAWV,WAAaW,EACtB,CACLZ,cAAe,EAAKW,WAAWX,cAC/BiB,YAAa,EAAKN,WAAWX,cAAgB,EAAKW,WAAWT,MAAM5E,SArChD,KAyCvB4F,UAAY,WAEV,OADA,EAAKC,YAAc,EAAKC,WAAW,EAAKP,MACjC,EAAKM,YACR,CACEnB,cAAe,EAAKmB,YAAYnB,cAChCiB,YACE,EAAKE,YAAYnB,cAAgB,EAAKmB,YAAYjB,MAAM5E,QAE5D,MAjDiB,KAoDvB8F,WAAa,SAACR,GACZ,OAAMA,EAAKT,OAASS,EAAKR,OAAUQ,EAAKP,SAAiB,KAEvDO,EAAKT,MACLS,EAAKT,KAAKE,UACVO,EAAKR,OACLQ,EAAKR,MAAMC,SAEJO,EACEA,EAAKT,OAASS,EAAKT,KAAKE,SAC1B,EAAKe,WAAWR,EAAKT,MACrBS,EAAKR,QAAUQ,EAAKR,MAAMC,SAC1B,EAAKe,WAAWR,EAAKR,YADzB,GA/DgB,KAmEvBiB,MAAQ,SAACT,EAAMrE,GAMb,IALA,IAII+E,EAJAC,EAAYX,EAAKT,KAAKD,MACtBsB,EAAaZ,EAAKR,MAAMF,MACxBuB,EAAa,GACbC,GAAoB,EAEfjG,EAAI,EAAGA,EAAI8F,EAAUjG,OAAQG,IAChCiG,GAAqBnF,EAAQgF,EAAU9F,GAAI+F,EAAW,KACxDE,GAAoB,EACpBD,EAAWE,KAAKH,EAAWI,SAC3BN,EAAe7F,EAAImF,EAAKZ,cACxBvE,KACKgG,EAAWE,KAAKJ,EAAU9F,IAE/BgG,EAAWnG,SAAWiG,EAAUjG,QAAUkG,EAAWlG,OAAS,IAChEmG,EAAWE,KAAKH,EAAWI,SAC3BN,EAAeV,EAAKR,MAAMJ,eAE5BY,EAAKT,KAAKD,MAAQuB,EAAWpG,QAC7B,IAAK,IAAII,EAAI,EAAGA,EAAI+F,EAAWlG,OAAQG,IAAKgG,EAAWE,KAAKH,EAAW/F,IAGvE,OAFAmF,EAAKV,MAAQuB,EAAWpG,QACxBuF,EAAKP,SAAiC,IAAtBmB,EAAWlG,OACpB,CACLuG,aAAcjB,EAAKR,MAAMJ,gBACzBsB,aAAcA,EACdQ,YAAalB,EAAKP,WA5FC,KAgGvB0B,UAAY,SAACxF,GACX,OAAO,EAAK8E,MAAM,EAAKF,YAAa5E,IAhGpCvB,KAAK6F,KAAO,IAAIf,EAAKU,EAAW,GAChCxF,KAAK2F,WAAa3F,KAAK6F,KACvB7F,KAAKmG,YAAc,MC4JRa,EA1Kf,kDACE,WAAYvF,GAAQ,IAAD,8BACjB,cAAMA,IAsDRC,KAAO,WAAO,IACJuF,EAAa,EAAK/E,MAAlB+E,SACR,EAAKnF,SAAS,CAAEC,WAAW,IAAQ,kBACjC,EAAKC,aAAaiF,EAAS,GAAIA,EAAS,QA1DzB,EA8DnBjF,aAAe,SAACkF,EAAWC,GACzB,EAAKhF,MAAM,CAAC+E,EAAWC,IAAU,WAAO,IAC9BzE,EAAwB,EAAKjB,MAA7BiB,oBACJtC,EAAU,EAAK8B,MAAMD,QAAQ5B,QACjC,GAAK8G,EAqDE,GAAIA,EAAQL,YAAa,CAG9B,IAH+B,IAAD,EACSK,EAA/BnC,EADsB,EACtBA,cAAeiB,EADO,EACPA,YACfrD,EAAW,EAAKV,MAAhBU,OACCnC,EAAIuE,EAAevE,EAAIwF,EAAaxF,IAC3CL,EAAQK,GAAG5B,gBAAgB+D,EAAOC,QAClCzC,EAAQK,GAAGtB,WAAW+H,EAAUf,YAAYb,YAE9C,EAAKxD,SAAS,CAAEG,QAAS7B,IAAW,kBAClC,EAAK4B,aAAakF,EAAW,aAE1B,CAKL,IALM,IAAD,EAC+CA,EAAUH,UAC5DtI,EAAU8C,SADJsF,EADH,EACGA,aAAcP,EADjB,EACiBA,aAAcQ,EAD/B,EAC+BA,YAGhCM,EAAWhH,EAAQyG,GACdpG,EAAIoG,EAAcpG,EAAI6F,EAAc7F,IAC3CL,EAAQK,GAAKL,EAAQK,EAAI,GAE3BL,EAAQkG,GAAgBc,EACpBN,IAAaK,EAAQL,aAAc,GACvC,EAAKhF,SAAS,CAAEG,QAAS7B,IAAW,kBAClC,EAAK4B,aAAakF,EAAWC,WAxE/B,GADAA,EAAUD,EAAUhB,YAsCb,CAIL,IAJM,IAAD,EACkCiB,EAA/BnC,EADH,EACGA,cAAeiB,EADlB,EACkBA,YACfrD,EAAW,EAAKV,MAAhBU,OACJnC,EAAIuE,EACDvE,GAAKuE,EAAgBiB,GAAe,EAAGxF,IAC5CL,EAAQK,GAAG5B,gBAAgB+D,EAAOyE,cAEpC,KAAO5G,EAAIwF,EAAaxF,IACtBL,EAAQK,GAAG5B,gBAAgB+D,EAAO0E,eAEpC,EAAKxF,SAAS,CAAEG,QAAS7B,IAAW,kBAClC,EAAK4B,aAAakF,EAAWC,WA9C/B,GADAA,EAAUD,EAAUzB,OAIb,CAAC,IAGF8B,EAHC,EACkCJ,EAA/BnC,EADH,EACGA,cAAeiB,EADlB,EACkBA,YADlB,EAEwBiB,EAAUvB,WAAWL,WAA1CvE,EAFH,EAEGA,IAAKC,EAFR,EAEQA,MAAOC,EAFf,EAEeA,KAGlBsG,EADEL,EAAUvB,WAAWV,WAAWE,MAAQ+B,EAAUvB,WACzC,CACT5E,IAAKA,EACLC,MACEA,GACC,IAAMvC,EAAUwB,oBAAoBe,QAClC+E,KAAKtD,IAAIrC,EAAQE,QAAUyF,KAAKtD,IAAI,IACzCxB,KAAMA,GAGG,CACTF,IACEA,GACC,IAAMtC,EAAUwB,oBAAoBc,MAClCgF,KAAKtD,IAAIrC,EAAQE,QAAUyF,KAAKtD,IAAI,IACzCzB,MAAOA,EACPC,KAAMA,GAGViG,EAAUvB,WAAWL,WAAaiC,EAClC,IAAK,IAAI9G,EAAIuE,EAAevE,EAAIwF,EAAaxF,IAAK,CAAC,IAAD,EACnBL,EAAQK,GAAGxB,aADQ,EACxC8B,IADwC,EACnCC,MADmC,EAC5BC,KACpBb,EAAQK,GAAGtB,WAAWoI,GAExB,EAAKzF,SAAS,CAAEG,QAAS7B,IAAW,kBAClC,EAAK4B,aAAakF,WA/BpBxE,IACA,EAAKZ,SAAS,CAAEC,WAAW,QAxElB,EAkJnBI,MAAQ,SAAC8E,EAAUtE,GAAW,IAAD,EACe,EAAKlB,MAAvCyB,EADmB,EACnBA,aAAcC,EADK,EACLA,gBACM,EAAKjB,MAAzBmB,gBACJF,EACFC,YAAW,WACLD,EACFR,IAEA,EAAKb,SAAS,CACZuB,gBAAiB4D,EACjBlF,WAAW,MAGdmB,GAEH,EAAKpB,SAAS,CACZuB,gBAAiB4D,EACjBlF,WAAW,KAjKf,EAAKG,MAAQ,CACXD,QAAS,GACTF,WAAW,EACXa,OAAQ,CACNG,SAAU,SACVF,OAAQ,iBACR2E,WAAY,cACZF,cAAe,YACfD,aAAc,SAVD,EADrB,gEAiBIrH,KAAK8B,SAAS,CACZG,QAASjC,KAAKyB,MAAM6B,aACpB2D,SAAU,CAAC,IAAI1B,EAAUvF,KAAKyB,MAAM6B,cAAe,UAnBzD,2CAuBwB,IAAD,EACYtD,KAAKkC,MAA5BH,EADW,EACXA,UACAoB,GAFW,EACAlB,QACSjC,KAAKyB,MAAzB0B,kBACHpB,GAAaoB,GAChBnD,KAAK0B,SA3BX,+BAgCwB1B,KAAKkC,MAAjBD,QAER,OACE,kBAACyB,EAAA,EAAD,CACEC,QAAQ,OACRC,cAAc,MACdC,eAAe,SACfC,WAAW,SACXC,UAAU,SAET/D,KAAKkC,MAAMD,QAAQ+B,KAAI,SAACC,GACvB,OACE,wBACEC,IAAKD,EAAKnE,QACVe,MAAO,CAAEsD,OAAQ,OAAQC,cAAe,SAEvCH,EAAK3E,kBAhDpB,GAA+B+E,aCkQhBoD,EAnQf,kDACE,WAAYhG,GAAQ,IAAD,8BACjB,cAAMA,IAqDRC,KAAO,SAACC,EAAWC,EAAaC,GAAgB,IAEtCI,EAAY,EAAKC,MAAjBD,QACR,EAAKH,SACH,CACEC,WAAW,EACXsB,gBAAiB,CAAC,KAAM,EAAGpB,EAAQ3B,OAAS,EAAG,EAAG,KAEpD,WACE,EAAK0B,aAAaC,EAAQ5B,aA/Db,EAoEnB2B,aAAe,SAAC0F,GACdlF,QAAQC,IAAI,YACZ,IAAMyC,EAAQwC,EAASrH,QACvB,EAAK8B,MAAM,EAAKV,MAAM4B,iBAAiB,WAAO,IAAD,EACP,EAAKnB,MAAjCmB,EADmC,EACnCA,gBAAiBT,EADkB,EAClBA,OADkB,cAEVS,EAFU,GAEpCsE,EAFoC,KAE7BC,EAF6B,KAExBC,EAFwB,KAEfC,GAFe,WAG7B,OAAVH,EACF,EAAKI,UAAU7C,GACNA,EAAM0C,GAAK5I,oBAAsB4D,EAAOoF,OACjD,EAAKC,UAAU/C,GACN4C,EAAID,IACbrF,QAAQC,IAAI,YACZ,EAAKyF,KAAKhD,QAhFG,EAqFnBgD,KAAO,SAAChD,GAAW,IAAD,EACoB,EAAKhD,MAAjCmB,EADQ,EACRA,gBAAiBT,EADT,EACSA,OADT,cAEiBS,EAFjB,GAETsE,EAFS,KAEFC,EAFE,KAEGC,EAFH,KAESpH,EAFT,KAEYqH,EAFZ,KAGV1H,EAAU8E,EAAM7E,QACtB,GAAII,IAAMqH,EACR1H,EAAQ0H,GAAGjJ,gBAAgB+D,EAAOE,UAClCN,QAAQC,IAAI,SAAUhC,EAAGqH,EAAG1H,GAC5B,EAAK0B,SACH,CACEuB,gBAAiB,CAACsE,EAAOC,EAAKC,EAAMpH,EAAGqH,EAAI,GAC3C7F,QAAS7B,IAEX,kBAAM,EAAK4B,aAAakD,WAErB,GAAIzG,EAAU8C,QAAQnB,EAAQK,GAAIL,EAAQ0H,IAAK,CACpDtF,QAAQC,IAAI,UAAWhC,EAAGqH,EAAG1H,GADuB,MAEzB,CAACA,EAAQ0H,GAAI1H,EAAQK,IAA/CL,EAAQK,GAF2C,KAEvCL,EAAQ0H,GAF+B,KAGpD,EAAKhG,SACH,CACEuB,gBAAiB,CAACsE,EAAOC,EAAKC,EAAMpH,EAAI,EAAGqH,EAAI,GAC/C7F,QAAS7B,IAEX,kBAAM,EAAK4B,aAAakD,WAG1B1C,QAAQC,IAAI,OAAQhC,EAAGqH,EAAG1H,GAC1BA,EAAQ0H,GAAGjJ,gBAAgB+D,EAAOK,OAClC,EAAKnB,SACH,CACEuB,gBAAiB,CAACsE,EAAOC,EAAKC,EAAMpH,EAAGqH,EAAI,GAC3C7F,QAAS7B,IAEX,kBAAM,EAAK4B,aAAakD,OArHX,EA0HnB+C,UAAY,SAAC/C,GACX,IAAM9E,EAAU8E,EAAM7E,QADD,EAEe,EAAK6B,MAAjCU,EAFa,EAEbA,OAAQS,EAFK,EAELA,gBAFK,cAGYA,EAHZ,GAGdsE,EAHc,KAGPC,EAHO,KAGFC,EAHE,KAGIpH,EAHJ,aAIa,CAACL,EAAQyH,GAAOzH,EAAQuH,KAAzDvH,EAAQuH,GAJY,KAIJvH,EAAQyH,GAJJ,KAKrB3C,EAAM0C,GAAK/I,gBAAgB+D,EAAOoF,QAClCxF,QAAQC,IAAIrC,GACZ,EAAK0B,SACH,CAAEG,QAAS7B,EAASiD,gBAAiB,CAACwE,EAAMD,EAAKC,EAAMpH,EAAI,EAAGA,EAAI,KAClE,WACE+B,QAAQC,IAAI,gBACZD,QAAQC,IAAI,EAAKP,MAAMD,SACvB,EAAKD,aAAakD,OAtIL,EA2InB6C,UAAY,SAAC7C,GAAW,IAAD,EACe,EAAKhD,MAAjCU,EADa,EACbA,OAAQS,EADK,EACLA,gBADK,cAEYA,EAFZ,GAEPuE,GAFO,WAEFC,EAFE,KAEIpH,EAFJ,KAEOqH,EAFP,KAGfK,EAASpC,KAAKC,OAAO6B,EAAOD,GAAO,GAEzC1C,EAAM0C,GAAK/I,gBAAgB+D,EAAO+E,OAClCzC,EAAM2C,GAAMhJ,gBAAgB+D,EAAO+E,OACnCzC,EAAMiD,GAAQtJ,gBAAgB+D,EAAO+E,OAErC,EAAK7F,SAAS,CAAEG,QAASiD,IAAS,WAChC,EAAK/C,MAAMkB,GAAiB,WAC1B,IAAI+E,EAAW,EAAKC,WAAW,CAACR,EAAMM,EAAQP,GAAM1C,GAChDkD,IAAaP,GACf3C,EAAM0C,GAAK/I,gBAAgB+D,EAAOG,UAClCmC,EAAMiD,GAAQtJ,gBAAgB+D,EAAOG,UACrCqF,EAAWP,GACFO,IAAaR,GACtB1C,EAAM2C,GAAMhJ,gBAAgB+D,EAAOG,UACnCmC,EAAMiD,GAAQtJ,gBAAgB+D,EAAOG,UACrCqF,EAAWR,IAEX1C,EAAM2C,GAAMhJ,gBAAgB+D,EAAOG,UACnCmC,EAAM0C,GAAK/I,gBAAgB+D,EAAOG,UAClCqF,EAAWD,GAEb,EAAKrG,SACH,CACEuB,gBAAiB,CAAC+E,EAAUR,EAAKC,EAAMpH,EAAGqH,GAC1C7F,QAASiD,IAEX,kBAAM,EAAKlD,aAAakD,aAzKb,EA+OnB/C,MAAQ,SAAC8E,EAAUtE,GAAW,IAAD,EACe,EAAKlB,MAAvCyB,EADmB,EACnBA,aAAcC,EADK,EACLA,gBAClBA,EACFC,YAAW,WACLD,EAAiBR,IAEnB,EAAKb,SAAS,CACZuB,gBAAiB4D,EACjBlF,WAAW,MAEdmB,GAEH,EAAKpB,SAAS,CACZuB,gBAAiB4D,EACjBlF,WAAW,KA3Pf,EAAKG,MAAQ,CACXD,QAAS,GACToB,gBAAiB,CAAC,KAAM,KAAM,MAC9BtB,WAAW,EACXa,OAAQ,CACNoF,OAAQ,WACRL,MAAO,WACP5E,SAAU,SACVF,OAAQ,iBACRC,SAAU,YACVG,MAAO,cAZM,EADrB,gEAmBIjD,KAAK8B,SAAS,CAAEG,QAASjC,KAAKyB,MAAM6B,iBAnBxC,2CAsBwB,IAAD,EAC6BtD,KAAKkC,MAApCH,GADE,EACXE,QADW,EACFF,WACToB,GAFW,EACSE,gBACArD,KAAKyB,MAAzB0B,kBACHpB,GAAaoB,GAChBnD,KAAK0B,SA1BX,+BA+BwB1B,KAAKkC,MAAjBD,QAER,OACE,kBAACyB,EAAA,EAAD,CACEC,QAAQ,OACRC,cAAc,MACdC,eAAe,SACfC,WAAW,SACXC,UAAU,SAET/D,KAAKkC,MAAMD,QAAQ+B,KAAI,SAACC,GACvB,OACE,wBACEC,IAAKD,EAAKnE,QACVe,MAAO,CAAEsD,OAAQ,OAAQC,cAAe,SAEvCH,EAAK3E,gBA/CpB,iCAgLagJ,EAAUrG,GACnB,IAAIsG,EAAWD,EAASjI,QACpBmI,EAAY,GAEhB,IADAA,EAAUC,QAAQF,EAAS3B,SACpB2B,EAASjI,OAAS,GAAG,CAE1B,IADA,IAAIG,EAAI,EAGNA,EAAI+H,EAAUlI,QACd7B,EAAU8C,QAAQU,EAAQsG,EAAS,IAAKtG,EAAQuG,EAAU/H,KAC1DA,KAEEA,IAAM+H,EAAUlI,OAClBkI,EAAU7B,KAAK4B,EAAS3B,SACT,IAANnG,EACT+H,EAAUC,QAAQF,EAAS3B,SAE3B4B,EAAYA,EACTnI,MAAM,EAAGI,GACTiI,OAAOH,EAASI,OAAO,EAAG,IAC1BD,OAAOF,EAAUnI,MAAMI,IAG9B,OAAO+H,EAAUzC,KAAKC,MAAMwC,EAAUlI,OAAS,QAvMnD,GAA+BuE,iBCgIhB+D,EA5Hf,kDACE,WAAYnH,GAAQ,IAAD,8BACjB,cAAMA,IA8BRoH,uBAAyB,WACvBrG,QAAQC,IAAI,UADiB,IAWzBqG,EAXyB,EASzB,EAAKrH,MANPsH,EAH2B,EAG3BA,cACA5F,EAJ2B,EAI3BA,gBACAT,EAL2B,EAK3BA,oBACAQ,EAN2B,EAM3BA,aAEA8F,GAR2B,EAO3BC,eAP2B,EAQ3BD,WAR2B,EAUmB,EAAK9G,MAA7CoB,EAVqB,EAUrBA,aAAc4F,EAVO,EAUPA,OAEtB,GAZ6B,EAUCC,gBAERJ,EAAe,CACnC,IAAK,IAAItI,EAAI,EAAGA,EAAI6C,EAAahD,OAAQG,IACvC6C,EAAa7C,GAAG5B,gBAAgB,UAElC,EAAKiD,SAAS,CAAEqH,cAAeJ,IAEX,IAAlBA,EACFD,EACE,kBAAC,EAAD,CACE5E,IAAKgF,EACL5F,aAAcA,EACdH,gBAAiBA,EACjBT,oBAAqBA,EACrBQ,aAAcA,IAGS,IAAlB6F,EACTD,EACE,kBAAC,EAAD,CACE5E,IAAKgF,EACL5F,aAAcA,EACdH,gBAAiBA,EACjBT,oBAAqBA,EACrBQ,aAAcA,IAGS,IAAlB6F,EACTD,EACE,kBAAC,EAAD,CACE5E,IAAKgF,EACL5F,aAAcA,EACdH,gBAAiBA,EACjBT,oBAAqBA,EACrBQ,aAAcA,IAGS,IAAlB6F,IACTD,EACE,kBAAC,EAAD,CACE5E,IAAKgF,EACL5F,aAAcA,EACdH,gBAAiBA,EACjBT,oBAAqBA,EACrBQ,aAAcA,KAKpB8F,GAAU,GACV,EAAKlH,SAAS,CACZsH,gBAAiBN,KA7FF,EAiGnBO,eAAiB,WACf7G,QAAQC,IAAI,cAIZ,IALqB,IAEb6G,EAAa,EAAKpH,MAAlBoH,SACAC,EAAmB,EAAK9H,MAAxB8H,eACJC,EAAc,GACT/I,EAAI,EAAGA,EAAI,EAAKgB,MAAMgI,OAAQhJ,IACrC+I,EAAY7C,KAAK,EAAK+C,cAAcJ,EAAW7I,GAAK6I,IAEtD,EAAKxH,UACH,SAACkB,GAAD,MAAgB,CACdM,aAAckG,EACdF,SAAUtG,EAAUsG,SAAWvD,KAAK4D,SACpCT,OAAQlG,EAAUkG,OAAS,MAE7B,kBAAM,EAAKL,4BAEbU,KAjHiB,EAoHnBG,aAAe,SAAC9K,EAAIE,GAAW,IAAD,EACQ,EAAKoD,MAAjC0H,EADoB,EACpBA,QAASC,EADW,EACXA,QACbnL,GAFwB,EACFoL,MACb/D,KAAKgE,MAAMhE,KAAK4D,UAAYC,EAAUC,GAAWA,IAC9D,OAAO,IAAIpL,EAAUC,EAAQ,GAAIE,IApHjC,EAAKsD,MAAQ,CACXoB,aAAc,GACduG,QAAS,IACTD,QAAS,IACTN,SAAU,EACVU,iBAAiB,EACjBZ,gBAAiB,KACjBD,cAAe,KACfD,OAAQ,GAXO,EADrB,gEAiBIlJ,KAAKqJ,mBAjBT,2CAoBwB,IAAD,EACUrJ,KAAKyB,MAA1BwI,EADW,EACXA,UADW,EACDR,QACOzJ,KAAKkC,MAAtBoB,aACmBhD,QAAU2J,IAAUjK,KAAKqJ,iBAC/CrJ,KAAKyB,MAAMyI,UAAWlK,KAAKyB,MAAMwI,UACpCjK,KAAK6I,2BAzBX,+BA6BI,OAAO7I,KAAKkC,MAAMkH,oBA7BtB,GAAqCvE,iB,8DC0GtBsF,E,kDAjGb,WAAY1I,GAAQ,IAAD,8BACjB,cAAMA,IA0FR2I,mBAAqB,SAACC,EAAOC,GAC3B,EAAK7I,MAAM8I,SAASD,IA5FH,EA8FnBE,iBAAmB,SAACH,EAAOC,GAAR,OAAqB,EAAK7I,MAAMgJ,UAAUH,IA3F3D,EAAKpI,MAAQ,GAHI,E,qDAMT,IAAD,EASHlC,KAAKyB,MAPPiJ,EAFK,EAELA,iBACAhI,EAHK,EAGLA,oBACAS,EAJK,EAILA,gBACAoG,EALK,EAKLA,eACAoB,EANK,EAMLA,eACAC,EAPK,EAOLA,wBACA3B,EARK,EAQLA,eAEM4B,EAA+BF,EAA/BE,OAAQC,EAAuBH,EAAvBG,OAAQC,EAAeJ,EAAfI,WAChBC,EAAmCJ,EAAnCI,QAASC,EAA0BL,EAA1BK,QAASC,EAAiBN,EAAjBM,aAC1B,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAAC1H,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMC,eAAe,gBACrD,kBAACwH,EAAA,EAAD,CAAQC,QAAS5I,GACf,kBAAC6I,EAAA,EAAD,KAAapI,EAAkB,QAAU,SAG3C,kBAACqI,EAAA,EAAD,CAAS1M,MAAM,YAAY2M,YAAY,WAAWC,UAAQ,IAE1D,kBAACC,EAAA,EAAD,CAAaC,QAAQ,OAAOC,SAAU1I,GACnC8F,EAAejF,KAAI,SAAC8H,EAAKlN,GAAN,OAClB,kBAACyM,EAAA,EAAD,CAAQnH,IAAKtF,EAAI0M,QAAS,kBAAMZ,EAAiB9L,KAC/C,kBAAC2M,EAAA,EAAD,KAAaO,QAKnB,kBAACN,EAAA,EAAD,CAAS1M,MAAM,YAAY2M,YAAY,WAAWC,UAAQ,IAE1D,kBAAChI,EAAA,EAAD,CACEC,QAAQ,OACRC,cAAc,SACdC,eAAe,SACflF,MAAM,SAEN,kBAAC4M,EAAA,EAAD,mBAEA,kBAACQ,EAAA,EAAD,CACEC,SAAUhM,KAAKwK,iBACfqB,SAAU1I,EACVrE,MAAM,YACNmN,OAAO,EACPC,IAAKrB,EACLsB,IAAKrB,EACLsB,KAAM,EACNC,aAActB,KAIlB,kBAACS,EAAA,EAAD,CAAS1M,MAAM,YAAY2M,YAAY,WAAWC,UAAQ,IAE1D,kBAAChI,EAAA,EAAD,CACEC,QAAQ,OACRC,cAAc,SACdC,eAAe,SACflF,MAAM,SAEN,kBAAC4M,EAAA,EAAD,sBAEA,kBAACQ,EAAA,EAAD,CACEjN,MAAM,YACNmN,OAAO,EACPJ,SAAU1I,EACVgJ,IAAKlB,EACLiB,IAAKlB,EACLoB,KAAM,EACNC,aAAcnB,EACdc,SAAUhM,KAAKoK,sBAInB,kBAACoB,EAAA,EAAD,CAAS1M,MAAM,YAAY2M,YAAY,WAAWC,UAAQ,IAE1D,kBAACL,EAAA,EAAD,CAAQC,QAAS/B,EAAgBsC,SAAU1I,GACzC,kBAACoI,EAAA,EAAD,4B,GApFU1G,iBCqFTyH,EAhGf,kDACE,WAAY7K,GAAQ,IAAD,8BACjB,cAAMA,IAoERuH,UAAY,SAACuD,GAAD,OAAY,EAAKzK,SAAS,CAAEoI,QAASqC,KArE9B,EAuEnB7B,iBAAmB,SAAC8B,GAAD,OACjB,EAAK1K,SAAS,CAAEiH,cAAeyD,EAAQtC,SAAS,KAxE/B,EA0EnBxH,oBAAsB,WACpB,EAAKZ,SAAS,CACZqB,iBAAkB,EAAKjB,MAAMiB,gBAC7B+G,SAAS,KA7EM,EAiFnBX,eAAiB,SAAC5G,GAAD,OACf,EAAKb,SAAS,CAAEmI,UAAW,EAAK/H,MAAM+H,SAAUC,SAAS,GAASvH,IAlFjD,EAoFnB8H,UAAY,SAACgC,GAAD,OAAY,EAAK3K,SAAS,CAAE2H,OAAQgD,EAAQvC,SAAS,KApF9C,EAsFnBK,SAAW,SAACmC,GAEV,EAAK5K,SAAS,CACZoB,aAAc,EAAKhB,MAAM0I,wBAAwB+B,UAAYD,EAC7DxC,SAAS,KAvFX,EAAKhI,MAAQ,CACX+G,eAAgB,CAAC,YAAa,YAAa,SAC3C0B,eAAgB,CACdE,OAAQ,EACRC,OAAQ,IACRC,WAAY,IAEdtB,OAAQ,GACRmB,wBAAyB,CACvBI,QAAS,EACTC,QAAS,IACT0B,UAAW,IACXzB,aAAc,KAEhBhI,aAAc,IACd6F,cAAe,EACf5F,iBAAiB,EACjB8G,UAAU,EACVC,SAAS,GArBM,EADrB,qDA0BY,IAAD,EAYHlK,KAAKkC,MAVPuH,EAFK,EAELA,OACAtG,EAHK,EAGLA,gBACA4F,EAJK,EAILA,cACAkB,EALK,EAKLA,SACAU,EANK,EAMLA,eACAC,EAPK,EAOLA,wBACA1H,EARK,EAQLA,aACA+F,EATK,EASLA,eACAiB,EAVK,EAULA,QAVK,EAWLlB,UAEF,OACE,yBAAKnI,MAAO,CAAEjB,gBAAiB,YAC7B,kBAAC,EAAD,CACE+K,eAAgBA,EAChBD,iBAAkB1K,KAAK0K,iBACvBhI,oBAAqB1C,KAAK0C,oBAC1BS,gBAAiBA,EACjBoG,eAAgBvJ,KAAKuJ,eACrBkB,UAAWzK,KAAKyK,UAChBG,wBAAyBA,EACzBL,SAAUvK,KAAKuK,SACftB,eAAgBA,IAElB,kBAAC,EAAD,CACED,UAAWhJ,KAAKgJ,UAChBkB,QAASA,EACTjB,eAAgBA,EAChBQ,OAAQA,EACRtG,gBAAiBA,EACjB4F,cAAeA,EACfkB,SAAUA,EACVV,eAAgBvJ,KAAKuJ,eACrB7G,oBAAqB1C,KAAK0C,oBAC1BQ,aAAcA,SA9DxB,GAAyB2B,iBCOL+H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrL,QAAQqL,MAAMA,EAAMC,c","file":"static/js/main.a23a629e.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Rectangle {\n  constructor(height, width, id) {\n    this._id = id;\n    this._height = height;\n    this._width = width;\n    this._outlineColor = \"maroon\";\n    this._outlineWidth = 4;\n    this._backgroundColor = Rectangle.getDefaultBgColor();\n  }\n\n  setOutlineColor = (color) => (this._outlineColor = color);\n\n  getOutlineColor = () => this._outlineColor;\n\n  getBgColor = () => this._backgroundColor;\n\n  setBgColor = (color) => (this._backgroundColor = color);\n\n  getHeight = () => this._height;\n\n  getJSX = () => (\n    <Rect\n      height={this._height}\n      width={this._width}\n      outlineWidth={this._outlineWidth}\n      outlineColor={this._outlineColor}\n      backgroundColor={Rectangle.rgbString(this._backgroundColor)}\n    />\n  );\n\n  getID = () => this._id;\n\n  static getDefaultBgColor = () => {\n    return { red: 30, green: 144, blue: 255 };\n  };\n\n  static rgbString = (rgbArr) => {\n    const { red, green, blue } = rgbArr;\n    return `rgb(${red},${green},${blue})`;\n  };\n\n  static areMatchingArrays = (arr1, arr2) => {\n    if (arr1.length != arr2.length) return false;\n    for (let i = 0; i < arr1.length; i++)\n      if (!this.matching(arr1[i], arr2[i])) return false;\n    return true;\n  };\n\n  /** Returns true if subArr is a subarray of arr*/\n  static isSubArray(arr, subArr) {\n    let tempArr = arr.slice();\n    if (subArr.length === 1)\n      return Rectangle.findRectIndex(tempArr, subArr[0]) !== -1;\n    else if (subArr.length > arr.length) return false;\n    else if (subArr.length === arr.length)\n      return Rectangle.areMatchingArrays(arr, subArr);\n\n    for (let i = 0; i < subArr.length; i++) {\n      let idx = Rectangle.findRectIndex(tempArr, subArr[i]);\n      if (idx === -1) return false;\n      else if (i !== 0 && idx > 0) i = -1;\n      else tempArr = tempArr.slice(idx + 1);\n    }\n    return true;\n  }\n\n  static findRectIndex(arr, elem) {\n    for (let i = 0; i < arr.length; i++)\n      if (Rectangle.matching(arr[i], elem)) return i;\n    return -1;\n  }\n\n  static matching = (rect1, rect2) => {\n    if (rect1.getID() == rect2.getID()) return true;\n  };\n\n  static compare = (rect1, rect2) => rect1.getHeight() > rect2.getHeight();\n}\n\nfunction Rect({ height, width, outlineWidth, outlineColor, backgroundColor }) {\n  const style = {\n    backgroundColor: `${backgroundColor}`,\n    outlineColor: `${outlineColor}`,\n    outlineStyle: \"solid\",\n    height: `${height}px`,\n    width: `${width}px`,\n    outlineWidth: `${outlineWidth}px`,\n  };\n\n  const defaultOutline = {};\n  return <div style={style}></div>;\n}\n\nexport default Rectangle;\n","import React, { Component } from \"react\";\nimport { Box, ThemeProvider } from \"@material-ui/core\";\nimport Rectangle from \"../Rectangle\";\n\nexport class SelectionSort extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rectArr: [],\n      sortingProgress: [0, 0, 0], //[sortedIndex, checkingIndex, selectedIndex]\n      isSorting: false,\n      colors: {\n        unsorted: \"maroon\",\n        sorted: \"mediumSeaGreen\",\n        selected: \"goldenRod\",\n        check: \"orangeRed\",\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ rectArr: this.props.rectangleArr });\n  }\n\n  componentDidUpdate() {\n    const { rectArr, isSorting, sortingProgress } = this.state;\n    const { isExecutingSort } = this.props;\n    if (!isSorting && isExecutingSort) {\n      let [sortedIndex, checkingIndex, selectedIndex] = sortingProgress;\n      this.sort(sortedIndex, checkingIndex, selectedIndex);\n    }\n  }\n\n  render() {\n    const { rectArr } = this.state;\n\n    return (\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        minHeight=\"100vh\"\n      >\n        {this.state.rectArr.map((rect) => {\n          return (\n            <li\n              key={rect.getID()}\n              style={{ margin: \"10px\", listStyleType: \"none\" }}\n            >\n              {rect.getJSX()}\n            </li>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  sort = (sortedIDX, checkingIDX, selectedIDX) => {\n    this.setState({ isSorting: true });\n    this.continueSort(sortedIDX, checkingIDX, selectedIDX);\n  };\n\n  continueSort = (sortedIDX, checkingIDX, selectedIDX) => {\n    const { rectArr } = this.state;\n    this.clock(sortedIDX, checkingIDX, selectedIDX, () => {\n      if (sortedIDX === rectArr.length) {\n        this.endSort();\n      } else if (checkingIDX === rectArr.length) {\n        this.incrementSortedIndex(\n          sortedIDX,\n          checkingIDX,\n          selectedIDX,\n          this.continueSort\n        );\n      } else if (checkingIDX === sortedIDX) {\n        this.beginSearch(\n          sortedIDX,\n          checkingIDX,\n          selectedIDX,\n          this.continueSort\n        );\n      } else if (checkingIDX > sortedIDX) {\n        this.search(sortedIDX, checkingIDX, selectedIDX, this.continueSort);\n      } else {\n        console.log(\"else\");\n      }\n    });\n  };\n\n  endSort = () => {\n    this.props.toggleExecutingSort();\n    this.setState({ isSorting: false });\n  };\n\n  incrementSortedIndex = (sortedIDX, checkingIDX, selectedIDX, funct) => {\n    const { rectArr, colors } = this.state;\n    const tempArr = rectArr.slice();\n    if (selectedIDX > sortedIDX) {\n      [tempArr[sortedIDX], tempArr[selectedIDX]] = [\n        tempArr[selectedIDX],\n        tempArr[sortedIDX],\n      ];\n    }\n    tempArr[sortedIDX].setOutlineColor(colors.sorted);\n    this.setState({ rectArr: tempArr }, () =>\n      funct(sortedIDX + 1, sortedIDX + 1, sortedIDX + 1)\n    );\n  };\n\n  beginSearch = (sortedIDX, checkingIDX, selectedIDX, funct) => {\n    const { rectArr, colors } = this.state;\n    const tempArr = rectArr.slice();\n    tempArr[checkingIDX].setOutlineColor(colors.selected);\n    for (let i = sortedIDX + 1; i < tempArr.length; i++)\n      tempArr[i].setOutlineColor(colors.unsorted);\n    this.setState(\n      (prevState) => ({\n        rectArr: tempArr,\n      }),\n      () => {\n        funct(sortedIDX, checkingIDX + 1, selectedIDX);\n      }\n    );\n  };\n\n  search = (sortedIDX, checkingIDX, selectedIDX, funct) => {\n    const { rectArr, colors } = this.state;\n    const tempArr = rectArr.slice();\n\n    if (Rectangle.compare(tempArr[selectedIDX], tempArr[checkingIDX])) {\n      if (selectedIDX !== sortedIDX) {\n        tempArr[selectedIDX].setOutlineColor(colors.check);\n      }\n      console.log(\"search\");\n      tempArr[checkingIDX].setOutlineColor(colors.selected);\n      this.setState(\n        (prevState) => ({\n          rectArr: tempArr,\n        }),\n        () => funct(sortedIDX, checkingIDX + 1, checkingIDX)\n      );\n    } else {\n      tempArr[checkingIDX].setOutlineColor(colors.check);\n      this.setState(\n        (prevState) => ({\n          rectArr: tempArr,\n        }),\n        () => funct(sortedIDX, checkingIDX + 1, selectedIDX)\n      );\n    }\n  };\n\n  clock = (sortedIDX, checkingIDX, selectedIDX, funct) => {\n    const { sortingSpeed, isExecutingSort } = this.props;\n    if (isExecutingSort)\n      setTimeout(() => {\n        if (isExecutingSort) funct();\n        else\n          this.setState({\n            sortingProgress: [sortedIDX, checkingIDX, selectedIDX],\n            isSorting: false,\n          });\n      }, sortingSpeed);\n    else\n      this.setState({\n        sortingProgress: [sortedIDX, checkingIDX, selectedIDX],\n        isSorting: false,\n      });\n  };\n}\n\nexport default SelectionSort;\n","import React, { PureComponent } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport Rectangle from \"../Rectangle\";\n\nexport class InsertionSort extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rectArr: [],\n      isSorting: false,\n      sortingProgress: [1, 0],\n      doneInsert: -1,\n      colors: {\n        unsorted: \"maroon\",\n        sorted: \"mediumSeaGreen\",\n        selected: \"goldenRod\",\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ rectArr: this.props.rectangleArr });\n  }\n\n  componentDidUpdate() {\n    const { isSorting } = this.state;\n    const { isExecutingSort } = this.props;\n    if (!isSorting && isExecutingSort) {\n      this.sort();\n    }\n  }\n\n  render() {\n    const { rectArr } = this.state;\n\n    return (\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        minHeight=\"100vh\"\n      >\n        {this.state.rectArr.map((rect) => {\n          return (\n            <li\n              key={rect.getID()}\n              style={{ margin: \"10px\", listStyleType: \"none\" }}\n            >\n              {rect.getJSX()}\n            </li>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  sort = () => {\n    const { sortingProgress, colors, rectArr } = this.state;\n    const [sortedIDX, insertIDX] = sortingProgress;\n    const tempArr = rectArr.slice();\n    tempArr[0].setOutlineColor(colors.sorted);\n    this.setState({ rectArr: tempArr, isSorting: true }, () =>\n      this.continueSort(sortedIDX, insertIDX)\n    );\n  };\n\n  continueSort = (sortedIDX, insertIDX, bypassClock) => {\n    this.clock(\n      sortedIDX,\n      insertIDX,\n      () => {\n        const { rectArr } = this.state;\n        if (sortedIDX > rectArr.length) {\n          this.endSort();\n        } else if (insertIDX === sortedIDX) {\n          this.beginInsert(sortedIDX, insertIDX, this.continueSort);\n        } else if (insertIDX > 0) {\n          this.continueInsert(sortedIDX, insertIDX, this.continueSort);\n        } else if (insertIDX <= 0) {\n          this.endInsert(sortedIDX, insertIDX, this.continueSort);\n        }\n      },\n      bypassClock\n    );\n  };\n\n  endSort = () => {\n    this.props.toggleExecutingSort();\n    this.setState({ isSorting: false });\n  };\n\n  beginInsert = (sortedIDX, insertIDX, funct) => {\n    const { rectArr, colors } = this.state;\n    const tempArr = rectArr.slice();\n    tempArr[insertIDX - 1].setOutlineColor(colors.selected);\n    this.setState({ rectArr: tempArr }, () => funct(sortedIDX, sortedIDX - 1));\n  };\n\n  continueInsert = (sortedIDX, insertIDX, funct) => {\n    const { rectArr, doneInsert, colors } = this.state;\n    const tempArr = rectArr.slice();\n    if (Rectangle.compare(tempArr[insertIDX - 1], tempArr[insertIDX])) {\n      [tempArr[insertIDX], tempArr[insertIDX - 1]] = [\n        tempArr[insertIDX - 1],\n        tempArr[insertIDX],\n      ];\n      this.setState({ rectArr: tempArr }, () =>\n        funct(sortedIDX, insertIDX - 1)\n      );\n    } else {\n      tempArr[insertIDX].setOutlineColor(colors.sorted);\n      this.setState({ rectArr: tempArr }, () => funct(sortedIDX, doneInsert));\n    }\n  };\n\n  endInsert = (sortedIDX, insertIDX, funct) => {\n    const { rectArr, colors } = this.state;\n    const tempArr = rectArr.slice();\n    if (insertIDX === 0) {\n      tempArr[insertIDX].setOutlineColor(colors.sorted);\n      this.setState({ rectArr: tempArr }, () =>\n        funct(sortedIDX + 1, sortedIDX + 1)\n      );\n    } else funct(sortedIDX + 1, sortedIDX + 1, true);\n  };\n\n  clock = (sortedIDX, insertIDX, funct, bypassClock) => {\n    const { sortingSpeed, isExecutingSort } = this.props;\n    if (isExecutingSort && !bypassClock)\n      setTimeout(() => {\n        if (isExecutingSort) funct();\n        else\n          this.setState({\n            sortingProgress: [sortedIDX, insertIDX],\n            isSorting: false,\n          });\n      }, sortingSpeed);\n    else if (bypassClock) funct();\n    else\n      this.setState({\n        sortingProgress: [sortedIDX, insertIDX],\n        isSorting: false,\n      });\n  };\n}\n\nexport default InsertionSort;\n","class Node {\n  constructor(data, subArrayIndex, parentNode) {\n    this.array = data;\n    this.left = null;\n    this.right = null;\n    this.parentNode = parentNode;\n    this.subArrayIndex = subArrayIndex;\n    this.isMerged = false;\n    if (this.array && this.array.length > 0)\n      this.arrayColor = this.array[0].getBgColor();\n  }\n}\n\n/** A binary tree design to be used to animate Merge Sort */\nexport class MergeTree {\n  //rootArray should be an array with a length greater than 1\n  constructor(rootArray) {\n    this.root = new Node(rootArray, 0);\n    this.newestStem = this.root;\n    this.mergingNode = null;\n  }\n\n  grow = () => {\n    return this.groweR(this.newestStem);\n  };\n\n  groweR = (node) => {\n    if (node.array.length <= 1 || (node.right && node.left)) {\n      if (node === this.root) {\n        return null;\n      } else {\n        return this.groweR(node.parentNode);\n      }\n    } else if (!node.left) {\n      node.left = new Node(\n        node.array.slice(0, Math.trunc(node.array.length / 2)),\n        node.subArrayIndex,\n        node\n      );\n      this.newestStem = node.left;\n    } else if (node.left) {\n      let localIndex = Math.trunc(node.array.length / 2);\n      node.right = new Node(\n        node.array.slice(localIndex),\n        node.subArrayIndex + localIndex,\n        node\n      );\n      this.newestStem = node.right;\n    }\n    this.newestStem.isMerged = this.newestStem.array.length === 1;\n    this.newestStem.parentNode = node;\n    return {\n      subArrayIndex: this.newestStem.subArrayIndex,\n      endingIndex: this.newestStem.subArrayIndex + this.newestStem.array.length,\n    };\n  };\n\n  findMerge = () => {\n    this.mergingNode = this.findMergeR(this.root);\n    return this.mergingNode\n      ? {\n          subArrayIndex: this.mergingNode.subArrayIndex,\n          endingIndex:\n            this.mergingNode.subArrayIndex + this.mergingNode.array.length,\n        }\n      : null;\n  };\n\n  findMergeR = (node) => {\n    if ((!node.left && !node.right) || node.isMerged) return null;\n    else if (\n      node.left &&\n      node.left.isMerged &&\n      node.right &&\n      node.right.isMerged\n    ) {\n      return node;\n    } else if (node.left && !node.left.isMerged)\n      return this.findMergeR(node.left);\n    else if (node.right && !node.right.isMerged)\n      return this.findMergeR(node.right);\n  };\n\n  merge = (node, compare) => {\n    let leftArray = node.left.array;\n    let rightArray = node.right.array;\n    let mergeArray = [];\n    let continueComparing = true;\n    let sortedNewIdx;\n    for (let i = 0; i < leftArray.length; i++) {\n      if (continueComparing && compare(leftArray[i], rightArray[0])) {\n        continueComparing = false;\n        mergeArray.push(rightArray.shift());\n        sortedNewIdx = i + node.subArrayIndex;\n        i--;\n      } else mergeArray.push(leftArray[i]);\n    }\n    if (mergeArray.length === leftArray.length && rightArray.length > 0) {\n      mergeArray.push(rightArray.shift());\n      sortedNewIdx = node.right.subArrayIndex;\n    }\n    node.left.array = mergeArray.slice();\n    for (let i = 0; i < rightArray.length; i++) mergeArray.push(rightArray[i]);\n    node.array = mergeArray.slice();\n    node.isMerged = rightArray.length === 0;\n    return {\n      sortedOldIdx: node.right.subArrayIndex++,\n      sortedNewIdx: sortedNewIdx,\n      isMergeDone: node.isMerged,\n    };\n  };\n\n  autoMerge = (compare) => {\n    return this.merge(this.mergingNode, compare);\n  };\n}\n\nexport default MergeTree;\n","import React, { Component } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport Rectangle from \"../../Rectangle\";\nimport MergeTree from \"./MergeTree\";\n\nexport class MergeSort extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rectArr: [],\n      isSorting: false,\n      colors: {\n        unsorted: \"maroon\",\n        sorted: \"mediumSeaGreen\",\n        semiSorted: \"LightSalmon\",\n        selectedRight: \"goldenRod\",\n        selectedLeft: \"gold\",\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      rectArr: this.props.rectangleArr,\n      progress: [new MergeTree(this.props.rectangleArr), null],\n    });\n  }\n\n  componentDidUpdate() {\n    const { isSorting, rectArr } = this.state;\n    const { isExecutingSort } = this.props;\n    if (!isSorting && isExecutingSort) {\n      this.sort();\n    }\n  }\n\n  render() {\n    const { rectArr } = this.state;\n\n    return (\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        minHeight=\"100vh\"\n      >\n        {this.state.rectArr.map((rect) => {\n          return (\n            <li\n              key={rect.getID()}\n              style={{ margin: \"10px\", listStyleType: \"none\" }}\n            >\n              {rect.getJSX()}\n            </li>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  sort = () => {\n    const { progress } = this.state;\n    this.setState({ isSorting: true }, () =>\n      this.continueSort(progress[0], progress[1])\n    );\n  };\n\n  continueSort = (mergeTree, indices) => {\n    this.clock([mergeTree, indices], () => {\n      const { toggleExecutingSort } = this.props;\n      let tempArr = this.state.rectArr.slice();\n      if (!indices) {\n        indices = mergeTree.findMerge();\n        if (!indices) {\n          indices = mergeTree.grow();\n          if (!indices) {\n            toggleExecutingSort();\n            this.setState({ isSorting: false });\n          } else {\n            const { subArrayIndex, endingIndex } = indices;\n            const { red, green, blue } = mergeTree.newestStem.arrayColor;\n            let newColor;\n            if (mergeTree.newestStem.parentNode.left == mergeTree.newestStem) {\n              newColor = {\n                red: red,\n                green:\n                  green +\n                  (255 - Rectangle.getDefaultBgColor().green) /\n                    (Math.log(tempArr.length) / Math.log(2)),\n                blue: blue,\n              };\n            } else {\n              newColor = {\n                red:\n                  red +\n                  (255 - Rectangle.getDefaultBgColor().red) /\n                    (Math.log(tempArr.length) / Math.log(2)),\n                green: green,\n                blue: blue,\n              };\n            }\n            mergeTree.newestStem.arrayColor = newColor;\n            for (let i = subArrayIndex; i < endingIndex; i++) {\n              const { red, green, blue } = tempArr[i].getBgColor();\n              tempArr[i].setBgColor(newColor);\n            }\n            this.setState({ rectArr: tempArr }, () =>\n              this.continueSort(mergeTree)\n            );\n          }\n        } else {\n          const { subArrayIndex, endingIndex } = indices;\n          const { colors } = this.state;\n          let i = subArrayIndex;\n          for (; i < (subArrayIndex + endingIndex) / 2; i++) {\n            tempArr[i].setOutlineColor(colors.selectedLeft);\n          }\n          for (; i < endingIndex; i++) {\n            tempArr[i].setOutlineColor(colors.selectedRight);\n          }\n          this.setState({ rectArr: tempArr }, () =>\n            this.continueSort(mergeTree, indices)\n          );\n        }\n      } else if (indices.isMergeDone) {\n        const { subArrayIndex, endingIndex } = indices;\n        const { colors } = this.state;\n        for (let i = subArrayIndex; i < endingIndex; i++) {\n          tempArr[i].setOutlineColor(colors.sorted);\n          tempArr[i].setBgColor(mergeTree.mergingNode.arrayColor);\n        }\n        this.setState({ rectArr: tempArr }, () =>\n          this.continueSort(mergeTree, null)\n        );\n      } else {\n        const { sortedOldIdx, sortedNewIdx, isMergeDone } = mergeTree.autoMerge(\n          Rectangle.compare\n        );\n        let tempRect = tempArr[sortedOldIdx];\n        for (let i = sortedOldIdx; i > sortedNewIdx; i--) {\n          tempArr[i] = tempArr[i - 1];\n        }\n        tempArr[sortedNewIdx] = tempRect;\n        if (isMergeDone) indices.isMergeDone = true;\n        this.setState({ rectArr: tempArr }, () =>\n          this.continueSort(mergeTree, indices)\n        );\n      }\n    });\n  };\n\n  clock = (progress, funct) => {\n    const { sortingSpeed, isExecutingSort } = this.props;\n    const { sortingProgress } = this.state;\n    if (isExecutingSort) {\n      setTimeout(() => {\n        if (isExecutingSort) {\n          funct();\n        } else {\n          this.setState({\n            sortingProgress: progress,\n            isSorting: false,\n          });\n        }\n      }, sortingSpeed);\n    } else {\n      this.setState({\n        sortingProgress: progress,\n        isSorting: false,\n      });\n    }\n  };\n}\n\nexport default MergeSort;\n","import React, { PureComponent } from \"react\";\nimport { Box, ThemeProvider, colors } from \"@material-ui/core\";\nimport Rectangle from \"../Rectangle\";\n\nexport class QuickSort extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rectArr: [],\n      sortingProgress: [null, null, null], //[pivot, low, high]\n      isSorting: false,\n      colors: {\n        border: \"seaShell\",\n        pivot: \"deepPink\",\n        unsorted: \"maroon\",\n        sorted: \"mediumSeaGreen\",\n        selected: \"goldenRod\",\n        check: \"orangeRed\",\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ rectArr: this.props.rectangleArr });\n  }\n\n  componentDidUpdate() {\n    const { rectArr, isSorting, sortingProgress } = this.state;\n    const { isExecutingSort } = this.props;\n    if (!isSorting && isExecutingSort) {\n      this.sort();\n    }\n  }\n\n  render() {\n    const { rectArr } = this.state;\n\n    return (\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        minHeight=\"100vh\"\n      >\n        {this.state.rectArr.map((rect) => {\n          return (\n            <li\n              key={rect.getID()}\n              style={{ margin: \"10px\", listStyleType: \"none\" }}\n            >\n              {rect.getJSX()}\n            </li>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  sort = (sortedIDX, checkingIDX, selectedIDX) => {\n    // console.log(this.state.rectArr);\n    const { rectArr } = this.state;\n    this.setState(\n      {\n        isSorting: true,\n        sortingProgress: [null, 0, rectArr.length - 1, 0, 0],\n      },\n      () => {\n        this.continueSort(rectArr.slice());\n      }\n    );\n  };\n\n  continueSort = (oldArray) => {\n    console.log(\"continue\");\n    const array = oldArray.slice();\n    this.clock(this.props.sortingProgress, () => {\n      const { sortingProgress, colors } = this.state;\n      const [pivot, low, high, i, j] = sortingProgress;\n      if (pivot === null) {\n        this.findPivot(array);\n      } else if (array[low].getOutlineColor() !== colors.border) {\n        this.movePivot(array);\n      } else if (j < high) {\n        console.log(\"scanning\");\n        this.scan(array);\n      }\n    });\n  };\n\n  scan = (array) => {\n    const { sortingProgress, colors } = this.state;\n    const [pivot, low, high, i, j] = sortingProgress;\n    const tempArr = array.slice();\n    if (i === j) {\n      tempArr[j].setOutlineColor(colors.selected);\n      console.log(\"i == j\", i, j, tempArr);\n      this.setState(\n        {\n          sortingProgress: [pivot, low, high, i, j + 1],\n          rectArr: tempArr,\n        },\n        () => this.continueSort(array)\n      );\n    } else if (Rectangle.compare(tempArr[i], tempArr[j])) {\n      console.log(\"compare\", i, j, tempArr);\n      [tempArr[i], tempArr[j]] = [tempArr[j], tempArr[i]];\n      this.setState(\n        {\n          sortingProgress: [pivot, low, high, i + 1, j + 1],\n          rectArr: tempArr,\n        },\n        () => this.continueSort(array)\n      );\n    } else {\n      console.log(\"else\", i, j, tempArr);\n      tempArr[j].setOutlineColor(colors.check);\n      this.setState(\n        {\n          sortingProgress: [pivot, low, high, i, j + 1],\n          rectArr: tempArr,\n        },\n        () => this.continueSort(array)\n      );\n    }\n  };\n\n  movePivot = (array) => {\n    const tempArr = array.slice();\n    const { colors, sortingProgress } = this.state;\n    const [pivot, low, high, i, j] = sortingProgress;\n    [tempArr[pivot], tempArr[high]] = [tempArr[high], tempArr[pivot]];\n    array[low].setOutlineColor(colors.border);\n    console.log(tempArr);\n    this.setState(\n      { rectArr: tempArr, sortingProgress: [high, low, high, i + 1, i + 1] },\n      () => {\n        console.log(\"Border added\");\n        console.log(this.state.rectArr);\n        this.continueSort(array);\n      }\n    );\n  };\n\n  findPivot = (array) => {\n    const { colors, sortingProgress } = this.state;\n    const [pivot, low, high, i, j] = sortingProgress;\n    const middle = Math.trunc((high - low) / 2);\n    // console.log(low, middle, high);\n    array[low].setOutlineColor(colors.pivot);\n    array[high].setOutlineColor(colors.pivot);\n    array[middle].setOutlineColor(colors.pivot);\n    // console.log(\"checkpoint\", array.slice());\n    this.setState({ rectArr: array }, () => {\n      this.clock(sortingProgress, () => {\n        let pivotIdx = this.findMedian([high, middle, low], array);\n        if (pivotIdx === high) {\n          array[low].setOutlineColor(colors.unsorted);\n          array[middle].setOutlineColor(colors.unsorted);\n          pivotIdx = high;\n        } else if (pivotIdx === low) {\n          array[high].setOutlineColor(colors.unsorted);\n          array[middle].setOutlineColor(colors.unsorted);\n          pivotIdx = low;\n        } else {\n          array[high].setOutlineColor(colors.unsorted);\n          array[low].setOutlineColor(colors.unsorted);\n          pivotIdx = middle;\n        }\n        this.setState(\n          {\n            sortingProgress: [pivotIdx, low, high, i, j],\n            rectArr: array,\n          },\n          () => this.continueSort(array)\n        );\n      });\n    });\n  };\n\n  findMedian(idxArray, rectArr) {\n    let idxClone = idxArray.slice();\n    let idxSorted = [];\n    idxSorted.unshift(idxClone.shift());\n    while (idxClone.length > 0) {\n      let i = 0;\n      for (\n        ;\n        i < idxSorted.length &&\n        Rectangle.compare(rectArr[idxClone[0]], rectArr[idxSorted[i]]);\n        i++\n      );\n      if (i === idxSorted.length) {\n        idxSorted.push(idxClone.shift());\n      } else if (i === 0) {\n        idxSorted.unshift(idxClone.shift());\n      } else {\n        idxSorted = idxSorted\n          .slice(0, i)\n          .concat(idxClone.splice(0, 1))\n          .concat(idxSorted.slice(i));\n      }\n    }\n    return idxSorted[Math.trunc(idxSorted.length / 2)];\n  }\n\n  // quickSort = (array, low, high) => {\n  //   const { sortingProgress } = this.state;\n  //   // console.log(array.slice());\n  //   if (low < high) {\n  //     let pivotIdx = this.partition(array, low, high);\n  //     this.quickSort(array, low, pivotIdx);\n  //     this.quickSort(array, pivotIdx + 1, high);\n  //   }\n  // };\n\n  // partition = (array, low, high) => {\n  //   if (low < high) {\n  //     console.log(\"begin partition\", high - low);\n  //     let pivot = array[low];\n  //     let leftWall = { val: low };\n  //     this.partitionR(array, high, pivot, leftWall, low + 1);\n  //     console.log(\"returning part\");\n  //   }\n  // };\n\n  // partitionR = (array, high, pivot, leftWall, i) => {\n  //   console.log(\"recursion\", i);\n  //   if (array) {\n  //     if (i < high) {\n  //       if (Rectangle.compare(pivot, array[i])) {\n  //         [array[i], array[leftWall.val]] = [array[leftWall.val], array[i]];\n  //         leftWall.val++;\n  //         this.setState({ rectArr: array }, () =>\n  //           this.partitionR(array, high, pivot, leftWall, i + 1)\n  //         );\n  //       }\n  //     } else {\n  //       [pivot, array[leftWall.val]] = [array[leftWall.val], pivot];\n  //       this.setState({ rectArr: array }, this.partitionR());\n  //     }\n  //   }\n  // };\n\n  clock = (progress, funct) => {\n    const { sortingSpeed, isExecutingSort } = this.props;\n    if (isExecutingSort)\n      setTimeout(() => {\n        if (isExecutingSort) funct();\n        else\n          this.setState({\n            sortingProgress: progress,\n            isSorting: false,\n          });\n      }, sortingSpeed);\n    else\n      this.setState({\n        sortingProgress: progress,\n        isSorting: false,\n      });\n  };\n}\n\nexport default QuickSort;\n","import React, { PureComponent } from \"react\";\nimport Rectangle from \"./Rectangle\";\nimport SelectionSort from \"./sortingAlgorithms/SelectionSort\";\nimport InsertionSort from \"./sortingAlgorithms/InsertionSort\";\nimport MergeSort from \"./sortingAlgorithms/mergeSort/MergeSort\";\nimport QuickSort from \"./sortingAlgorithms/QuickSort\";\n// import MergeSort from \"./sortingAlgorithms/mergeSort/MergeSort\";\n\nexport class RectangleCanvas extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rectangleArr: [],\n      minRect: 150,\n      maxRect: 600,\n      keyReset: 1,\n      finishedSorting: false,\n      methodComponent: null,\n      currentMethod: null,\n      arrKey: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.resetRectArray();\n  }\n\n  componentDidUpdate() {\n    const { resetArr, arrLen } = this.props;\n    const { rectangleArr } = this.state;\n    if (arrLen != rectangleArr.length || resetArr) this.resetRectArray();\n    if (!this.props.updated || this.props.resetArr)\n      this.updateSortingComponent();\n  }\n\n  render() {\n    return this.state.methodComponent;\n  }\n\n  updateSortingComponent = () => {\n    console.log(\"update\");\n    const {\n      sortingMethod,\n      isExecutingSort,\n      toggleExecutingSort,\n      sortingSpeed,\n      sortingOptions,\n      isUpdated,\n    } = this.props;\n    const { rectangleArr, arrKey, currentMethod } = this.state;\n    let updateComponent;\n    if (currentMethod !== sortingMethod) {\n      for (let i = 0; i < rectangleArr.length; i++) {\n        rectangleArr[i].setOutlineColor(\"maroon\");\n      }\n      this.setState({ currentMethod: sortingMethod });\n    }\n    if (sortingMethod === 0) {\n      updateComponent = (\n        <SelectionSort\n          key={arrKey}\n          rectangleArr={rectangleArr}\n          isExecutingSort={isExecutingSort}\n          toggleExecutingSort={toggleExecutingSort}\n          sortingSpeed={sortingSpeed}\n        />\n      );\n    } else if (sortingMethod === 1) {\n      updateComponent = (\n        <InsertionSort\n          key={arrKey}\n          rectangleArr={rectangleArr}\n          isExecutingSort={isExecutingSort}\n          toggleExecutingSort={toggleExecutingSort}\n          sortingSpeed={sortingSpeed}\n        />\n      );\n    } else if (sortingMethod === 2) {\n      updateComponent = (\n        <MergeSort\n          key={arrKey}\n          rectangleArr={rectangleArr}\n          isExecutingSort={isExecutingSort}\n          toggleExecutingSort={toggleExecutingSort}\n          sortingSpeed={sortingSpeed}\n        />\n      );\n    } else if (sortingMethod === 3) {\n      updateComponent = (\n        <QuickSort\n          key={arrKey}\n          rectangleArr={rectangleArr}\n          isExecutingSort={isExecutingSort}\n          toggleExecutingSort={toggleExecutingSort}\n          sortingSpeed={sortingSpeed}\n        />\n      );\n    }\n\n    isUpdated(true);\n    this.setState({\n      methodComponent: updateComponent,\n    });\n  };\n\n  resetRectArray = () => {\n    console.log(\"ResetArray\");\n    const { keyReset } = this.state;\n    const { toggleResetArr } = this.props;\n    let rectArrTemp = [];\n    for (let i = 0; i < this.props.arrLen; i++) {\n      rectArrTemp.push(this.generateRect((keyReset + i) / keyReset));\n    }\n    this.setState(\n      (prevState) => ({\n        rectangleArr: rectArrTemp,\n        keyReset: prevState.keyReset + Math.random(),\n        arrKey: prevState.arrKey + 1,\n      }),\n      () => this.updateSortingComponent()\n    );\n    toggleResetArr();\n  };\n\n  generateRect = (id, color) => {\n    const { maxRect, minRect, newId } = this.state;\n    let height = Math.floor(Math.random() * (maxRect - minRect) + minRect);\n    return new Rectangle(height, 20, id);\n  };\n}\n\nexport default RectangleCanvas;\n","import React, { PureComponent } from \"react\";\nimport \"../stylings/SelectionBar.css\";\nimport \"../stylings/Default.css\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Button,\n  Typography,\n  Divider,\n  ButtonGroup,\n  Slider,\n  Grid,\n  Box,\n} from \"@material-ui/core\";\n\nclass OptionBar extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    const {\n      setSortingMethod,\n      toggleExecutingSort,\n      isExecutingSort,\n      toggleResetArr,\n      arrConstraints,\n      sortingSpeedConstraints,\n      sortingOptions,\n    } = this.props;\n    const { minLen, maxLen, defaultLen } = arrConstraints;\n    const { slowest, fastest, defaultSpeed } = sortingSpeedConstraints;\n    return (\n      <>\n        <AppBar position=\"sticky\">\n          <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-evenly\">\n            <Button onClick={toggleExecutingSort}>\n              <Typography>{isExecutingSort ? \"Pause\" : \"Play\"}</Typography>\n            </Button>\n\n            <Divider color=\"secondary\" orientation=\"vertical\" flexItem />\n\n            <ButtonGroup variant=\"text\" disabled={isExecutingSort}>\n              {sortingOptions.map((opt, id) => (\n                <Button key={id} onClick={() => setSortingMethod(id)}>\n                  <Typography>{opt}</Typography>\n                </Button>\n              ))}\n            </ButtonGroup>\n\n            <Divider color=\"secondary\" orientation=\"vertical\" flexItem />\n\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              width=\"12.5%\"\n            >\n              <Typography>Array Size</Typography>\n\n              <Slider\n                onChange={this.lenSliderHandler}\n                disabled={isExecutingSort}\n                color=\"secondary\"\n                marks={true}\n                min={minLen}\n                max={maxLen}\n                step={1}\n                defaultValue={defaultLen}\n              ></Slider>\n            </Box>\n\n            <Divider color=\"secondary\" orientation=\"vertical\" flexItem />\n\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              width=\"12.5%\"\n            >\n              <Typography>Sorting Speed</Typography>\n\n              <Slider\n                color=\"secondary\"\n                marks={true}\n                disabled={isExecutingSort}\n                max={fastest}\n                min={slowest}\n                step={1}\n                defaultValue={defaultSpeed}\n                onChange={this.speedSliderHandler}\n              ></Slider>\n            </Box>\n\n            <Divider color=\"secondary\" orientation=\"vertical\" flexItem />\n\n            <Button onClick={toggleResetArr} disabled={isExecutingSort}>\n              <Typography>Reset Array</Typography>\n            </Button>\n          </Box>\n        </AppBar>\n      </>\n    );\n  }\n\n  speedSliderHandler = (event, newValue) => {\n    this.props.setSpeed(newValue);\n  };\n  lenSliderHandler = (event, newValue) => this.props.setArrLen(newValue);\n}\n\nexport default OptionBar;\n","import React, { PureComponent } from \"react\";\nimport RectangleCanvas from \"./components/RectangleCanvas\";\nimport OptionBar from \"./components/OptionBar\";\nimport \"./stylings/Default.css\";\n\nexport class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sortingOptions: [\"Selection\", \"Insertion\", \"Merge\"],\n      arrConstraints: {\n        minLen: 4,\n        maxLen: 100,\n        defaultLen: 10,\n      },\n      arrLen: 10,\n      sortingSpeedConstraints: {\n        slowest: 0,\n        fastest: 2000,\n        speedBase: 2000,\n        defaultSpeed: 1000,\n      },\n      sortingSpeed: 1000,\n      sortingMethod: 0,\n      isExecutingSort: false,\n      resetArr: false,\n      updated: true,\n    };\n  }\n\n  render() {\n    const {\n      arrLen,\n      isExecutingSort,\n      sortingMethod,\n      resetArr,\n      arrConstraints,\n      sortingSpeedConstraints,\n      sortingSpeed,\n      sortingOptions,\n      updated,\n      isUpdated,\n    } = this.state;\n    return (\n      <div style={{ backgroundColor: \"#323232\" }}>\n        <OptionBar\n          arrConstraints={arrConstraints}\n          setSortingMethod={this.setSortingMethod}\n          toggleExecutingSort={this.toggleExecutingSort}\n          isExecutingSort={isExecutingSort}\n          toggleResetArr={this.toggleResetArr}\n          setArrLen={this.setArrLen}\n          sortingSpeedConstraints={sortingSpeedConstraints}\n          setSpeed={this.setSpeed}\n          sortingOptions={sortingOptions}\n        />\n        <RectangleCanvas\n          isUpdated={this.isUpdated}\n          updated={updated}\n          sortingOptions={sortingOptions}\n          arrLen={arrLen}\n          isExecutingSort={isExecutingSort}\n          sortingMethod={sortingMethod}\n          resetArr={resetArr}\n          toggleResetArr={this.toggleResetArr}\n          toggleExecutingSort={this.toggleExecutingSort}\n          sortingSpeed={sortingSpeed}\n        />\n      </div>\n    );\n  }\n\n  /** Non-Lifecycle Methods */\n\n  isUpdated = (update) => this.setState({ updated: update });\n\n  setSortingMethod = (method) =>\n    this.setState({ sortingMethod: method, updated: false });\n\n  toggleExecutingSort = () => {\n    this.setState({\n      isExecutingSort: !this.state.isExecutingSort,\n      updated: false,\n    });\n  };\n\n  toggleResetArr = (funct) =>\n    this.setState({ resetArr: !this.state.resetArr, updated: false }, funct);\n\n  setArrLen = (newLen) => this.setState({ arrLen: newLen, updated: false });\n\n  setSpeed = (newSpeed) => {\n    // console.log(this.state.sortingSpeedConstraints.speedBase - newSpeed);\n    this.setState({\n      sortingSpeed: this.state.sortingSpeedConstraints.speedBase - newSpeed,\n      updated: false,\n    });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}